Plan...

- Contexte stage
      Projet professionnel
      Le LAAS et Gepetto (activité intégration outils modélisation / simulation
      
- objectifs
      implémenter un algorithme de dynamique hybride dans metapod
      =>  algorithme optimisé décrit par Roy Featherstone ouvrage “Rigid Body Dynamics Algorithm"
          publication: Rigid Body Dynamics Algorithms.  Springer, New York, c2008
          Roy Featherstone: Chercheur spécialisé en modélisation dynamique de robots. Ph.D. à Edinburgh -> univ Australian National -> Professeur invité à l'IIT 
      =>  Formalisme de Newton-Euler, Algèbre Spatiale (mécanique des torseurs),
          (vs formalisme Lagrange: effort généralisé sur chaque articulation en termes d'NRJ
      =>  Metapod, librairie d'algorithmes basés sur l'algèbre spatiale, C++ template méta-programmation
      
      Analyser et appliquer les optimisations de Featherstone, combiner avec optimisations Eigen
      =>  Eigen, librairie templatée
      =>  optimisations spécifiques à algo dyn hybride (réduire dimension du système à résoudre)
      =>  optimisation branch sparsity (structure creuse de la matrice d'inertie H)
      
      Réflexion sur l'application de la Dynamique Hybride
      =>  modélisation d'articulation flexibles ("compliant")
      =>  commande de robot ayant une base flottante

%====================================================================================================================

- La Modélisation Dynamique. 

  Indispensable dans certains cas:
    => robot articulé, membres à l'inertie non négligeable
    => robot sans base fixe ou roulante (garantir l'appui au sol et l'équilibre)
  
  On traite dans cet exposé: arbres cinématiques, pas les boucles
  
  Comment poser le problème dynamique. Equation de mouvement (notations):
  
\begin{description}
  \item[$model$ :] le modèle dynamique du système à multi-corps rigides
  \item[$q, \dot{q}, \ddot{q}$ :] vecteurs de position, vitesse, accélération des articulations du système
  \item[$\tau$ :] forces/couples moteurs (internes) appliqués aux articulations
  \item[$f^{ext}$ :] forces de contrainte extérieures (force de gravitation, coriolis, forces de contact, ...)
\end{description}

  Les 3 types de problème dynamique
    - dynamique directe  =>  trouver les accélérations induites par les forces appliquées aux articulations
      Application: simulation
      
\begin{equation}
\ddot{q} = \mathrm{FD}(model,\mathbf{q,\dot{q},\tau})
\end{equation}

    - dynamique inverse  =>  trouver les forces à appliquer aux accélérations pour produire les articulations voulues
      Application:  contrôle, composante de dynamique directe ou inverse
      Utilité du calcul des couples actionneurs robot humanoïde:
          =>  commande en couple ou 
          =>  estimation du centre de pression -> injecté dans le PC (preview control) -> générer trajectoire CoM
      
\begin{equation}
\mathbf{\tau} = \mathrm{ID}(model,\mathbf{q,\dot{q},\ddot{q}})
\end{equation}

    - dynamique hybride  =>  généralisation de de la dynamique directe et inverse
                             pour chaque articulation, on connaît soit le couple (art. $fd$) soit l'accélération (art. $id$)
                             L'algo calcule toutes les inconnues ($fd$ ->> FD, $id$ -> ID)
      Applications: simulation avec contraintes suppl sur une art. (excitation)
                    simulation simplifiée (certaines accélérations connues)
                    modéliser système à articulations flexibles
                    robot sans base fixe (la base flottante est l'articulation "fd", couple appliqué est connu et nul, l'algo donne son accélération => pourrait améliorer l'estimation de la position du centre de pression (ZMP) => utilisé par le filtre dynamique pour corriger la trajectoire du CoM du robot humanoïde
                    -> $q,\dot{q},\ddot{q} = \mathrm{IK}(modele_ponctuel, c, \dot{c}, \ddot{c}, X^f)$
                    -> $f,\tau = \mathrm{ID}(modele_complet,q,\dot{q},\ddot{q})$ --> CoP^MB
                    -> $\delta CoM = PreviewControl(\delta CoP) de Kajita$
    
%====================================================================================================================

- Contraintes en performances

On se base sur le cahier des charges de l'RNEA utilisé dans le filtrage dynamique du CoM
--> [cube de contraintes]
    - période d'échantillonnage 5ms (1 commande vectorielle $\mathbf{q}$ de 30 DOF) -> $1ms$ pour les calculs de dynamique
    - fenêtre de filtrage dynamique 1.6s => 32 RNEA
    => 1 RNEA en $30\mu s$
    <v> ~ $4\mu s$ sur i7-4700HQ, ~ $15\mu s$ sur HRP2 Core2(TM) Duo E7500

--> précision numérique 0.1%

- Algèbre Spatiale et méta programmation

  - basée sur les torseurs (avec différence de notation), réduit la compléxité de la modélisation dynamique, comb. translation/rotation
    (composition simplifiée des vitesses et accélérations)
  - Algos CRBA et RNEA exploitent la récursivité (\emph{pattern} Visiteur), la "sparsité" / abscesnce de couplage entre branches cinématiques
  - méta prog. => propriétés d'un langage symbolique (calculs inutiles non exécutés)
  - méta fonctions génèrent des traitements/calculs numériques à la compilation
    (conditions méta fonction: params->types ou int statiques et constants)

- Architecture de la librairie \emph{metapod}

<Schéma global figure 1.1 p12>

\emph{metapo} fournit algos basés sur modèle dynamique général
prend un modèle $M$ spécifique (header)
génère du code optimisé spécifique au modèle $M$

<schéma fonctionnel interne de metapod>


%====================================================================================================================

- Les bases de l'algorithme: formalisme de l'Algèbre Spatiale

  mécanique des torseurs avec des notations simplifiées et spécifiques à Featherstone

  Torseurs, vecteurs spaciaux et bases de \emph{Plücker}
    (torseur: le moment d'un ensemble de vecteurs liés a la forme d'un champ antisymétrique => vecteur et moment du torseur.
    Le vecteur est l'opérateur du produit vectoriel: f, w.)
    
    - torseurs de mouvement: vitesse
    <figure 2.1(a) p14> et <base de \emph{Plücker}>
    rotation w autour de p=> vo =  [wo=wp;vo=op x w]
    translation vp        => vo =  [vp]
    
    Voir le corps comme un fluide en mouvement. $v$ = vitesse du flux de points du corps à travers $O$
    
%    - torseurs de mouvement: accélération
%    $ao = d/dt[w;vo] = [\dot{w};\dot{v}_o]$
%    (Différent de l'accélération classique, liée à un point fixe du corps.
%    Approche classique -> vo(t+dt) bouge avec le point $O$
%    Approche spatiale  -> vo(t+dt) lié à un point fixe de l'espace)
%    
%    exemples de cas simples: corps en rotation pure => vo=[wp;op x w]
%                                                    => ao=0
    
%    (préparer exercice avec chaîne coplanaire)
    
    - torseur de force
    <figure B.1(b)>
    force f en p  => fo=[n0=op x f; f]
    couple np en p=> fo=[np; 0]
    
    - moment et inertie
    vec spatial ĥ: <featherstone equ 2.59>
    Mêmes propriétés qu'un vecteur force (règles de transformation)
    NRJ cinétiquee = 1/2ĥ.v (produit scalaire invariant)
    Inertie: h=Iv => <featherstone equ 2.62>
    => transformation: <featherstone equ 2.66>
    
  vecteurs spatiaux et opérations
    mêmes propriétés que les torseurs par rapport aux différentes opérations:
    - somme
    - produit par un scalaire
    - produit scalaire, vectoriel
    => équivalent aux opérations sur les matrices associées aux torseurs
    
  Articulations, contraintes
    - transformations de coordonnées, matrice de passage $^BX_A$
    - transf. pour torseur de mouvement=> $X$
      transf. pour torseur de force    => (produit scalaire est invariant=>) $X^{\asterisc}  = (X^{-1})^T = X^{-T}$
    <figure 2.2> (modèle géométrique d'un \sigma de corps rigides. focus sur $X_{J1} = F0,1 --> F1$
    vJ (equ 2.2) en fonction de la matrice de sélection $S_k$ du corps $k$. (Vitesse du corps $k$ /r au corps parent. Puis exprimé dans le vecteur monde)
    Par récursivité surtoute la chaîne cinématique, on exprime $^ov_k$
    (position de l'articulation /r au corps la supportant. transformation liée à $q$ variable articulaire).
    Relation entre $S_k$ et $X_{Jk}$:
    
  Modélisation de l'arbre cinématique: définition du graphe connecté
    Description d'un arbre cinématique:
    <schéma corps et arbre cin> (à créer)
    (animation montrant la numérotation et les notions prédécesseur, succ, \nu \mu etc)
    - numérotation:
      - noeud $i$ = corps $i$, arc $i$ = articulation $i$ ($i \in [1,N]$)
      - noeud racine (0) = base fixe
      - numérotation ascendante $i \in [1,N]$ telle que $\lambda(i) < i$
      - arc $i$ connecte corps $i$ à son parent
      
    concepts fondamentaux sur la représentation des arbres cinématiques \cite[ch.4.1]{bib_featherstone}:

\begin{itemize}
\item $p(i)$ est le noeud \emph{prédécesseur} et $s(i)$ est le noeud \emph{successeur} de l'articulation $i$
\item $\lambda(i)$ est le noeud \emph{parent} du corps $i$
\item $\forall i \neq 0: \kappa(i)$ est l'ensemble des noeuds sur le chemin entre le noeud $i$ et la base (noeud $0$)
\item $\forall i: \mu (i)$  est l'ensemble des enfants du noeud $i$
\item $\forall i: \nu (i)$  est l'ensemble des noeuds supportés par l'articulation $i$, ou encore, inclus dans le sous-arbre suspendu au noeud $i$
\item $\nu(fd)$: est le sous-arbre supporté par au moins un articulation $fd$
\end{itemize}

    on illustre les ensembles qu'on vient de décrire.\\

\begin{figure}[H]
\minipages[2]{c}{.5}{.5}{}
{%
  \begin{center}
  	\incFig[1]{0.8\textwidth}
  	\end{center}
}
{%
  \begin{center}
  	\begin{tabular}{|c|c|c|c|c|c|c|c|}
  	\hline 
	articul. $i$ & 1 & 2 & 3 & 4 & 5 & 6 & 7 \\ 
  	\hline 
  	$p$ & 0 & 1 & 1 & 2 & 2 & 3 & 3 \\ 
  	\hline 
  	$s$ & 1 & 2 & 3 & 4 & 5 & 6 & 7 \\ 
  	\hline 
  	$\lambda$ & 0 & 1 & 1 & 2 & 2 & 3 & 3 \\ 
  	\hline 
  	\end{tabular} 
  \end{center}
}{}
\caption{$p$, $s$, $\lambda$, $\kappa$, $\mu$ et $\nu$ dans l'arbre cinétique}
\label{fig_chdaArbreK_p_s_k_mu_nu}
\end{figure}

\setmyFiguresFile{optimisations}

\begin{minipage}[c]{0.5\textwidth}
  \dispFig[H]{5}{0.7\textwidth}{Exemple de $\nu(fd)$ dans l'arbre cinématique. Le noeud 1 n'appartient pas à $\nu(fd)$}{fig_chdaArbreK_nuFD}
\end{minipage}

         
%===================================   integre  =====================================================================

- Algorithme de Dynamique Hybride

  principes et implémentation ===========
  
  Algorithmes déjà implémentés:
  Dynamique inverse:	Recursive Newton-Euler Algorithm
  Dynamique directe:	Composite-Rigid-Body Algorithm
  
  Algorithmes à implémenter et intégrer à la Dynamique Hybride:
  Calcul optimisé de $H$
  Dynamique directe:	résolution de $H \ddot{q}=\tau - C$
  Dynamique inverse différentielle
  
  équation de mouvement d'un arbre cinématique:
  
  <equ 3.1>
  
  <description des variables>
  
  (pour chaque articulation $i$ on connaît soit le couple soit l'accélération)
  articulations\emph{fd} "forward dynamics" => $\tau_i$ connu
  articulation \emph{id} "inverse dynamics" => $\ddot{q}_i$ connu
  
  ordre par défaut (pour tous les algorithmes) de $q_i$ dans $\mathbf{q}$ (exemple):
  
  <figure 3.1>
  
  => ordre du parcours en profondeur DFS:
  
\begin{align*}
\ddot{q} &= 
\begin{bmatrix}
  \ddot{q}_1 & \ddot{q}_2 & \textcolor{blue}{\ddot{q}_4} & \ddot{q}_5 & \textcolor{blue}{\ddot{q}_3} & \ddot{q}_6 & \ddot{q}_7
\end{bmatrix}^T \\
Q \ddot{q} &= 
\begin{bmatrix}
  \textcolor{blue}{\ddot{q}_4} & \textcolor{blue}{\ddot{q}_3} & \ddot{q}_1 & \ddot{q}_2 & \ddot{q}_5 & \ddot{q}_6 & \ddot{q}_7
\end{bmatrix}
=
\begin{bmatrix}
  \underline{\ddot{q}_1} \\
  \underline{\ddot{q}_2}
\end{bmatrix} \\
\textnormal{ et de même } \\
Q \tau &= 
\begin{bmatrix}
  \underline{\tau_1} \\
  \underline{\tau_2}
\end{bmatrix}
\quad \textnormal{et} \quad
Q C = 
\begin{bmatrix}
  C_1 \\
  C_2
\end{bmatrix}
\quad \textnormal{et} \quad
Q H Q^T = 
\begin{bmatrix}
  H_{11} & H_{12} \\
  H_{21} & H_{22}
\end{bmatrix} 
\end{align*}

  Reformulation de l'équation de mouvement (3.2 => inconnues rassemblées à gauche):
  
  <equ 3.5> \label{equ_equationMvt_dynHyb1}
  <equ 3.2 et 3.3> \label{equ_equationMvt_dynHyb2}
  
  Se décline en 2 lignes...
  
  $H_{11} \ddot{q}_1 = \tau_1 - C'_1$ --> résoudre $\ddot{q}_1$ \\
\begin{align*}
&H_{21} \ddot{q}_1 - \tau_2 = -C'_2
\iff
&\tau_2 = C'_2 + H_{21} \ddot{q}_1
\end{align*}

(introduire les deux premières étapes et numéroter 1-4)
(garder en bandeau supérieur les 2 équations de mouvement)
Calcul de $C'$: 
\begin{align*}
\textnormal{Pour} \quad \ddot{q}=
\begin{bmatrix}
  0 \\
  \ddot{q}_2
\end{bmatrix}
: 
&\left{
\eqref{equ_equationMvt_dynHyb2}
\iff
\begin{bmatrix}
  C'_1 \\
  C'_2
\end{bmatrix}
=
\begin{bmatrix}
  \tau_1 \\
  \tau_2
\end{bmatrix} \\
\eqref{equ_equationMvt_dynHyb1}
\iff
\begin{bmatrix}
  C'_1 \\
  C'_2
\end{bmatrix}
=
Q \mathrm{ID} \left( q,\dot{q},Q^T
\begin{bmatrix}
  0 \\
  \ddot{q}_2
\end{bmatrix} \right)
\right.
\iff
&\begin{bmatrix}
  C'_1 \\
  C'_2
\end{bmatrix}
=
Q \mathrm{ID} \left( q,\dot{q},Q^T
\begin{bmatrix}
  0 \\
  \ddot{q}_2
\end{bmatrix} \right)
\end{align*}

Calcul de $H_{11}$ sous-matrice de $H$
  - calcul de $H = \mathrm{CRBA}(modèle,q)$
  - permutation $H' = Q H Q^T$
  - sélection de $H_{11}$ (méthode d'accès par blocs de la classe \verb;Eigen::Matrix; => \verb;H'.block<n_{fd},n_{fd};)

Résoudre $\ddot{q}_1$ \\
  Système linéaire: $H_{11} \ddot{q}_1 = \tau_1 - C'_1$
  Inversion de $H$ trop coûteuse (complexité $O(n^3)$ (où n est la dimension de $H$)
  => décomposition de $H$
  
Choix de la décomposition:
  $H$ et $H_{11}$ symétriques, définies positives 
  [tableau avec complexité des diff. méthodes]
\setlength{\intextsep}{0pt}
\setlength{\columnsep}{0cm}
\begin{wraptable}[7]{r}{0.45\textwidth}\raggedleft
\begin{tabular}[H]{|l|c|}
\hline
Décomposition ou méthode & Complexité $O$ \\ \hline \hline
inversion directe de matrice & $O(n^3)$ \\ \hline
LLT et LDLT & $O(n^3/3)$ \\ \hline
LU & $O(2n^3/3)$ \\ \hline
QR & $O(4n^3/3)$ \\
\hline
\end{tabular}
\end{wraptable}
  => factorisation LDL^T (robuste, rapide, la plus appropriée):
  $H_{11} = L D L^T$
  ($D$ matrice diagonale,
   $L$ matrice triangulaire inférieure et $\forall i: L_{ii}=1$)
  Solveur \verb;Eigen::LDLT;

Calcul de $\tau_2$:
  Sélection de $H_{21}$ dans  $H'$
  $\tau_2 = C'_2 + H_{21} \ddot{q}_1$
  
Algorithme complet:
  <algo 3.1.1>
  
%======================================== intégré ===================================================================

- Optimisations [cubes]

  Correction du calcul optimal de $^sXp$
  => rotations à axes parallèles à $Ox$ ou $Oy$ ou $Oz$ du repère lié au corps
  
  Calcul de $H$ limité aux coefficients de $H_{11}$ (HCRBA)
    Calcul de $H$ complet: $\forall noeud_i$ sauf la base, calcul de $H_{ij}$ ($j$ = noeud séléectionné en remontant l'arbre vers la racine)
    Optimisation $H_{11}$: seuls les noeuds de $\nu(fd)$ sont visités, et $H_{ij}$ calculés pour $i,j \in fd$
    Optimisation $H_{11}$ + $H_{21}$: calcul étendu au reste de l'arbre si $i \in fd$
    
<Figure 3.5 pour H normal>
<Figure  
  Dynamique Inverse Différentielle pour le calcul de $\tau_2$
    (on montre que)
\begin{equation}
\tau = C' + ID_{\delta} \left( Q^T \begin{bmatrix} 
                                     \ddot{q}_1 \\
                                     0 
                                   \end{bmatrix} \right) \label{equ_tauIDdiff_2}
=
C' + \mathrm{ID}(q,\dot{q},Q^T\begin{bmatrix}
                                \ddot{q}_1 \\      
                                0         
                              \end{bmatrix}) - Q \: \mathrm{ID}(q,\dot{q},0)
\end{equation}
    Termes simplifiés entre les 2 fonctions ID => algorithme RNEA simplifié
  
- Résultats: temps d'exécutions relatifs à un RNEA classique
    Mesures du temps d'exécution de chacune des étapes (a -> e) de l'algorithme (4 + reconstruction des vecteurs)
    Comparaison des optimisations (1 -> 4):
\begin{enumerate}
\item matrices de passage à axes fixes prédéfinis
\item HCRBA(CRBA hybride) $H_{11}-H_{12}-H_{21}$
\item utilisation du module \emph{Eigen} de Sparsité
\item HCRBA $H_{11}$ seule + Dynamique Inverse différenciel ($ID_\delta$), sans la sparsité \emph{Eigen}
\end{enumerate}

  (les optimisations sont cumulées dans l'ordre de numérotation. Voici l'ensemble des mesures réalisées sur notre modèle de robot humanoïde)

\begin{flushleft}

\begin{table}[H]
\begin{center}
\begin{tabular}[H]{|l|l|}
\hline
Nom du CPU & Intel(R) Core(TM) i7-4700HQ CPU \\ \hline \hline
Fréquence & 2.40GHz \\ \hline
Fréquence bus CPU & 800 MHz \\ \hline
Nombre de coeurs & 8(4) \\ \hline
Taille du cache & 6144 Kb \\ \hline
Distribution & Ubuntu 14.04 LTS (trusty) \\
\hline
\end{tabular}
\caption[Table caption text]{Propriétés du processeur réalisant le test.}
\label{table:propriétésProc}
\end{center}
\end{table}

\begin{table}[H]
\begin{center}
\begin{tabular}[H]{|l|l|l|}
\hline
Version d'implémentation                   & implémentation initiale    & (1)      \\ \hline \hline
Durée moyenne                              & 16.286723                  & 14.07054 \\
a: RNEA                                    & 6.39608                    & 5.46801  \\
b: CRBA                                    & 7.59427                    & 6.31883  \\
c: $\ddot{q}_1$ (solver)                   & 0.894731                   & 0.872069 \\
d: $\tau_2$                                & 0.730014                   & 0.734224 \\
e: reconstruction de $\tau$ et $\ddot{q}$  & 0.671628                   & 0.677407 \\
\hline
\end{tabular}
\caption[Table caption text]{Durées de traitement (en $\mu s$) des étapes du CHDA: optimisation liée aux repères à axes fixes.}
\label{table:performancesOptimAxesFixes}
\end{center}
\end{table}

\begin{table}[H]
\begin{center}
\begin{tabular}[H]{|l|l|l|l|l|l|l|l|l|}
\hline
Version d'implémentation                   & \multicolumn{2}{c|}{(1)}  & \multicolumn{2}{c|}{(2)} & \multicolumn{2}{c|}{(3)} & \multicolumn{2}{c|}{(4)} \\ \hline \hline
                                           & $\mu s$      & (\%)      & $\mu s$     & (\%)   & $\mu s$     & (\%)   & $\mu s$   & (\%) \\ \hline
Durée moyenne                              & 14.07054     & 2.57      & 11.118823   & 2.16   & 11.626056   & 2.16   & 10.968547 & 2.02 \\
a: RNEA                                    & 5.46801      & 1         & 5.14257     & 1      & 5.38397     & 1      & 5.42778   & 1    \\
b: CRBA                                    & 6.31883      & 1.16      & 3.66517     & 0.71   & 3.61689     & 0.67   & 2.3934    & 0.44 \\
c: $\ddot{q}_1$ (solver)                   & 0.872069     & 0.16      & 0.889762    & 0.17   & 1.21743     & 0.23   & 0.886647  & 0.16 \\
d: $\tau_2$                                & 0.734224     & 0.13      & 0.738075    & 0.14   & 0.731042    & 0.14   & 2.26072   & 0.42 \\
e: reconstruction de $\tau$ et $\ddot{q}$  & 0.677407     & 0.12      & 0.683246    & 0.13   & 0.676724    & 0.13   & 0         & 0    \\
\hline
\end{tabular}
\caption[Table caption text]{Durées de traitement (en $\mu s$) des étapes du CHDA: les optimisationsspécifiques au CHDA. On a reporté, pour chacune d'elles le gain relatif par rapport à un traitement de référence qui est l'étape 1 (RNEA classique).}
\label{table:performancesOptimSpecifCHDA}
\end{center}
\end{table}

\end{flushleft}


%=========================================== intégré ================================================================

Méthodes de développement et de validation

- Cycle de développement:
    spécification de l'algorithme, des contraintes --> développement --> tests unitaires (--> développement) --> validation fonctionnelle(--> spécifications) --> évaluation de performances(--> spécifications d'optimisations et nouveau cycle)
    
- tests unitaires et Validation
    exécution pas à pas des fonctions créées (gdb, qtcreator)
    validation de résultats d'algorithmes: traitements alternatifs (HCRBA, RNEA/CRBA)
    Méta fonctions: comparaison phase compilation vs exécution
    Matrice de permutation: vérification fonctionnelle et des propriétés 
    Génération aléatoire de vecteurs de test $q$, $\dot{q}$, $\ddot{q}$, $\tau$
    Mesures de temps d'exécution sur 100000 itérations

%============================================ intégré ===============================================================

Outils de développement

- langages et outils de développement:
    template C++ et Méta programmation
    
    BOOST pour lier les scripts de tests à \emph{metapo}
          pour créer des tableaux de types ou d'objets "noeud" templatés
          
    Eigen
    
    cmake

- Outils d'édition, analyse et gestion de configuration:
    emacs, Qtcreator, gdb, github, git, gitk, cachegrind
    